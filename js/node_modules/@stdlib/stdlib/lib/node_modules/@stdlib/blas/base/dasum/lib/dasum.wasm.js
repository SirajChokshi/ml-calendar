/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var copy = require( '@stdlib/utils/copy' );
var createModule = require( './../src/dasum.wasm.js' );
var DEFAULTS = require( './defaults.json' );
var validate = require( './validate.js' );
var cwrap = require( './cwrap.js' );


// VARIABLES //

var wasmBinaryFile = resolve( __dirname, '..', 'src', 'dasum.wasm' );


// MAIN //

/**
* Returns a function to compute the sum of absolute values.
*
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.memory] - total memory
* @param {PositiveInteger} [options.stack=1024] - total stack size
* @param {ArrayBuffer} [options.buffer] - memory
* @throws {TypeError} options argument must be an object
* @throws {Error} must provide valid options
* @returns {Function} function to compute the sum of absolute values
*
* @example
* // Create a `dasum` function:
* var dasum = factory({
*     'memory': 16777216
* });
* // Create a data array:
* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* // Determine the number of bytes:
* var nbytes = x.length * x.BYTES_PER_ELEMENT;
*
* // Allocate space on the heap:
* var bytes = dasum.malloc( nbytes );
*
* // Copy the data to the heap:
* bytes.set( new Uint8Array( x.buffer ) );
*
* // Compute the sum:
* var s = dasum( x.length, bytes, 1 );
* // returns 15.0
*
* // Free the memory:
* dasum.free( bytes );
*/
function factory( options ) {
	var Module;
	var dasum;
	var opts;
	var err;

	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	opts.wasmBinaryFile = wasmBinaryFile;

	// Instantiate a new `Module` instance:
	Module = createModule( opts );

	// Generate a JavaScript interface:
	dasum = cwrap( Module );

	return dasum;
}


// EXPORTS //

module.exports = factory;
