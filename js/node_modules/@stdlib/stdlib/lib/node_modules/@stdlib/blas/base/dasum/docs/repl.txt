
{{alias}}( N, x, stride )
    Computes the sum of the absolute values.

    The sum of absolute values corresponds to the *L1* norm.

    The `N` and `stride` parameters determine which elements in `x` are used to
    compute the sum.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` or `stride` is less than or equal to `0`, the function returns `0`.

    Parameters
    ----------
    N: integer
        Number of elements to sum.

    x: Float64Array
        Input array.

    stride: integer
        Index increment.

    Returns
    -------
    sum: number
        Sum of absolute values.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );
    > var sum = {{alias}}( x.length, x, 1 )
    19.0

    // Sum every other value:
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > var stride = 2;
    > sum = {{alias}}( N, x, stride )
    10.0

    // Use view offset; e.g., starting at 2nd element:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > sum = {{alias}}( N, x1, stride )
    12.0


{{alias}}.ndarray( N, x, stride, offset )
    Computes the sum of absolute values using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offset` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of elements to sum.

    x: Float64Array
        Input array.

    stride: integer
        Index increment.

    offset: integer
        Starting index.

    Returns
    -------
    sum: number
        Sum of absolute values.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );
    > var sum = {{alias}}.ndarray( x.length, x, 1, 0 )
    19.0

    // Sum the last three elements:
    > x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );
    > sum = {{alias}}.ndarray( 3, x, -1, x.length-1 )
    15.0


{{alias}}.wasm( [options] )
    Returns a memory managed function to compute the sum of absolute values.

    For an externally defined `Float64Array`, data must be copied to the heap.

    Parameters
    ----------
    options: Object (optional)
        Options.

    options.memory: integer (optional)
        Total memory. If not provided a buffer, setting the memory option
        instructs the returned function to allocate an internal memory store of
        the specified size.

    options.stack: integer (optional)
        Total stack size. Must be less than the memory option and large enough
        for a program's needs. Default: `1024` bytes.

    options.buffer: ArrayBuffer (optional)
        `ArrayBuffer` serving as the underlying memory store. If not provided,
        each returned function will allocate and manage its own memory. If
        provided a memory option, the buffer `byteLength` must equal the
        specified total memory.

    Returns
    -------
    out: Function
        Memory managed function.

    Examples
    --------
    > var wasm = {{alias}}.wasm();
    > var N = 5;

    // Allocate space on the heap:
    > var bytes = wasm.malloc( N * 8 );

    // Create a Float64Array view:
    > var view = new {{alias:@stdlib/array/float64}}( bytes.buffer, bytes.byteOffset, N );

    // Copy data to the heap:
    > view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );

    // Compute the sum of absolute values (passing in the heap buffer):
    > var s = wasm( N, bytes, 1 )
    15.0

    // Free the memory:
    > wasm.free( bytes );

    See Also
    --------

