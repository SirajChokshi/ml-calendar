/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Multiply `X` by a constant and add the result to `Y`.
*
* This add-on provides an interface to the BLAS Level 1 routine `daxpy`.
*
* @see <a href="http://www.netlib.org/lapack/explore-html/de/da4/group__double__blas__level1.html">daxpy</a>
*/
#include <nan.h>
#include "daxpy.h"

/**
* Add-on namespace.
*/
namespace addon_daxpy {

	using Nan::FunctionCallbackInfo;
	using Nan::TypedArrayContents;
	using Nan::ThrowTypeError;
	using Nan::ThrowError;
	using v8::Number;
	using v8::Local;
	using v8::Value;

	/**
	* Multiplies `X` by a constant and adds the result to `Y`.
	*
	* When called from JavaScript, the function expects the following arguments:
	*
	* * __N__: number of elements.
	* * __alpha__: scalar.
	* * __X__: input `Float64Array`.
	* * __strideX__: `X` stride length.
	* * __Y__: destination `Float64Array`.
	* * __strideY__: `Y` stride length.
	*
	* @param info   arguments
	*/
	void node_daxpy( const FunctionCallbackInfo<Value>& info ) {
		if ( info.Length() != 6 ) {
			ThrowError( "invalid invocation. Must provide 6 arguments." );
			return;
		}
		if ( !info[ 0 ]->IsNumber() ) {
			ThrowTypeError( "invalid argument. First argument must be a number." );
			return;
		}
		if ( !info[ 1 ]->IsNumber() ) {
			ThrowTypeError( "invalid argument. Second argument must be a number." );
			return;
		}
		if ( !info[ 3 ]->IsNumber() ) {
			ThrowTypeError( "invalid argument. Fourth argument must be a number." );
			return;
		}
		if ( !info[ 5 ]->IsNumber() ) {
			ThrowTypeError( "invalid argument. Sixth argument must be a number." );
			return;
		}
		const int N = info[ 0 ]->Uint32Value();
		const double alpha = info[ 1 ]->NumberValue();
		const int strideX = info[ 3 ]->Uint32Value();
		const int strideY = info[ 5 ]->Uint32Value();

		// We assume we were given Float64Arrays. In Node v0.10, typed arrays required special access and construction.
		TypedArrayContents<double> X( info[ 2 ] );
		TypedArrayContents<double> Y( info[ 4 ] );

		c_daxpy( N, alpha, *X, strideX, *Y, strideY );
	}

	NAN_MODULE_INIT( Init ) {
		Nan::Export( target, "daxpy", node_daxpy );
	}

	NODE_MODULE( addon, Init )
} // end namespace addon_daxpy
